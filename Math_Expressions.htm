<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" class="no-feedback" data-mc-search-type="Stem" data-mc-help-system-file-name="Default.xml" data-mc-path-to-help-system="" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Operators &amp; Expressions">
    <head>
        <meta charset="utf-8" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Math Expressions</title>
        <link href="Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="Resources/Stylesheets/Styles.css" rel="stylesheet" />
        <script src="Resources/Scripts/jquery.min.js">
        </script>
        <script src="Resources/Scripts/plugins.min.js">
        </script>
        <script src="Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink MCWebHelpFramesetLinkTop" style="display: none;"><a href="Default.htm#Math_Expressions.htm">Open topic with navigation</a>
        </p>
        <script type="text/javascript">/* <![CDATA[ */
			var _gaq = _gaq || [];
			_gaq.push(['_setAccount', 'UA-16579649-1']);
			_gaq.push(['_trackPageview']);
			(function() {
			var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
			ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
			var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
			})();
		/* ]]> */</script>
        <h1>Math Expressions</h1>
        <p>You can use   general    mathematical expressions    on   numerical    data    extracted    from    log    lines. For any mathematical or group-by function that implicitly requires integers, Sumo Logic casts the string data to a number for you. </p>
        <p>Syntax:</p>
        <ul>
            <li value="1">... | expression [as alias] | ...</li>
        </ul>
        <p>Rules:</p>
        <ul>
            <li value="1">The term "expression" is evaluated as a mathematical expression in the context of existing fields.</li>
            <li value="2">Parentheses can be used to group operations.</li>
            <li value="3">The ternary operator is supported so you can use "condition ? value_if_true : value_if_false".</li>
            <li value="4">Supported mathematical operators +, -, *, /, % </li>
        </ul>
        <p>Examples:</p>
        <ul>
            <li value="1">Boolean  expression    tests like:  disk &gt; 0.8 ? 1 : 0 as overcapacity
            </li>
            <li value="2">Math  function    calls like:    min((fps / 10 + 1) * 10, 70) as bucket
            </li>
            <li value="3">Assuming x = 1, 2, then <br /><b>ceil(sqrt(x*x + y*y)) as d</b><br />should result in d = 2.0</li>
        </ul>
        <h2>Basic Functions</h2>
        <p>Standard math functions are supported.</p>
        <h3>abs</h3>
        <p>Calculates the absolute value of x.</p>
        <ul>
            <li value="1">Syntax: abs(x)</li>
            <li value="2">Example: abs(-1.5) as v // v = 1.5</li>
        </ul>
        <h3 class="tight">round</h3>
        <p>Returns the closest integer to x.</p>
        <ul>
            <li value="1">Syntax: round(x)</li>
            <li value="2">Example: round((bytes/1024)/1024) as MB</li>
        </ul>
        <h3 class="tight">ceil</h3>
        <p>Rounds up to the smallest integer value. Returns the smallest integral value that is not less than x.</p>
        <ul>
            <li value="1">Syntax: ceil(x)</li>
            <li value="2">Examples: <ul><li value="1">ceil(1.5) as v    // v = 2</li><li value="2">ceil(-1.5) as v   // v = -1</li></ul></li>
        </ul>
        <h3 class="tight">floor</h3>
        <p>Rounds down to the largest previous integer value. Returns the largest integer not greater than x.</p>
        <ul>
            <li value="1">Syntax: floor(x)</li>
            <li value="2">Examples:<ul><li value="1">floor(1.5) as v // v = 1</li><li value="2">floor(-1.5) as v // v = -2</li></ul></li>
        </ul>
        <h3 class="tight">max</h3>
        <p>Returns the larger of two values.</p>
        <ul>
            <li value="1">Syntax: max(x, y, z)</li>
            <li value="2">Example: max(1, 2) as v // v = 2</li>
        </ul>
        <h3 class="tight">min</h3>
        <p>Returns the smaller of two values.</p>
        <ul>
            <li value="1">Syntax: min(x, y, z)</li>
            <li value="2">Example: min(1, 2) as v // v = 1</li>
        </ul>
        <h3 class="tight">sqrt</h3>
        <p>Returns the square root value of x.</p>
        <ul>
            <li value="1">Syntax: sqrt(x)</li>
            <li value="2">Example: sqrt(4) as v // v = 2</li>
        </ul>
        <h3 class="tight">cbrt</h3>
        <p>Returns the cube root value of x.</p>
        <ul>
            <li value="1">Syntax: cbrt(x)</li>
            <li value="2">Example: cbrt(8) as v // v = 2</li>
        </ul>
        <h2>Exponents and Logs</h2>
        <p>Exponential and logarithmic functions are supported.</p>
        <h3 class="tight">exp</h3>
        <p>Returns Euler's number e raised to the power of x.</p>
        <ul>
            <li value="1">Syntax: exp(x)</li>
            <li value="2">Example: exp(1) as v // v = 2.7182818284590455</li>
        </ul>
        <h3 class="tight">expm1</h3>
        <p>Returns value of x in exp(x)-1, compensating for the roundoff in exp(x).</p>
        <ul>
            <li value="1">Syntax: expm1(x)</li>
            <li value="2">Example: expm1(0.1) as v // v = 0.10517091807564763</li>
        </ul>
        <h3 class="tight">log</h3>
        <p>Returns the natural logarithm of  x.</p>
        <ul>
            <li value="1">Syntax: log(x)</li>
            <li value="2">Example: log(2) as v // v = 0.6931471805599453</li>
        </ul>
        <h3 class="tight">log10</h3>
        <p>Returns the base 10 logarithm of x.</p>
        <ul>
            <li value="1">Syntax: log10(x)</li>
            <li value="2">Example: log10(2) as v // v = 0.3010299956639812</li>
        </ul>
        <h3 class="tight">log1p</h3>
        <p>Computes log(1+x) accurately for small values of x.</p>
        <ul>
            <li value="1">Syntax: log1p(x)</li>
            <li value="2">Example: log1p(0.1) as v // v = 0.09531017980432487</li>
        </ul>
        <h2>Trigonometric Functions</h2>
        <p>Trigonometric functions are supported.</p>
        <h3 class="tight">sin </h3>
        <p>Sine of argument in radians.</p>
        <ul>
            <li value="1">Syntax: sin(x)</li>
            <li value="2">Example: sin(1) as v // v = 0.8414709848078965</li>
        </ul>
        <h3 class="tight">cos</h3>
        <p>Cosine of argument in radians.</p>
        <ul>
            <li value="1">Syntax: cos(x)</li>
            <li value="2">Example: cos(1) as v // v = 0.5403023058681398</li>
        </ul>
        <h3 class="tight">tan</h3>
        <p>Tangent of argument in radians.</p>
        <ul>
            <li value="1">Syntax:  tan(x)</li>
            <li value="2">Example: an(1) as v // v = 1.5574077246549023</li>
        </ul>
        <h3 class="tight"> asin</h3>
        <p>Inverse sine; result is in radians.</p>
        <ul>
            <li value="1">Syntax: asin(x)</li>
            <li value="2">Example: asin(1) as v // v = 1.5707963267948966</li>
        </ul>
        <h3 class="tight">acos</h3>
        <p>Inverse cosine; result is in radians.</p>
        <ul>
            <li value="1">Syntax: acos(x)</li>
        </ul>
        <h3 class="tight">atan</h3>
        <p>Inverse tangent; result is in radians.</p>
        <ul>
            <li value="1">Syntax: atan(x)</li>
        </ul>
        <h3 class="tight">atan2</h3>
        <p>Four-quadrant inverse tangent.</p>
        <ul>
            <li value="1">Syntax: atan2(b, c)</li>
            <li value="2">Example: atan2(0, -1) as v // v = pi</li>
        </ul>
        <h3 class="tight">sinh</h3>
        <p>Hyperbolic sine of argument in radians.</p>
        <ul>
            <li value="1">Syntax: sinh(x)</li>
        </ul>
        <h3 class="tight">cosh</h3>
        <p>Hyperbolic cosine of argument in radians.</p>
        <ul>
            <li value="1">Syntax: cosh(x)</li>
        </ul>
        <h3 class="tight">tanh</h3>
        <p>Hyperbolic tangent of argument in radians.</p>
        <ul>
            <li value="1">Syntax: tanh(x)</li>
        </ul>
        <h2>A Few More Functions</h2>
        <p>Additional math functions hypot and signum are also supported, as well as functions to convert between degrees and radians.</p>
        <h3 class="tight">hypot</h3>
        <p>Returns the square root of the sum of an array of squares.</p>
        <ul>
            <li value="1">Syntax: hypot(x, y, z)</li>
            <li value="2">Example: hypot(1, 0) as v // v = 1</li>
        </ul>
        <h3 class="tight">signum </h3>
        <p>Returns an array y the same size as x, where each element of y is:</p>
        <ul>
            <li value="1">1 if the corresponding element of x is greater than zero</li>
            <li value="2">0 if the corresponding element of x equals zero</li>
            <li value="3">-1 if the corresponding element of x is less than zero<br /><br /></li>
            <li value="4">Syntax: signum(x)</li>
            <li value="5">Examples: <ul><li value="1">signum(2) as v // v = 1</li><li value="2">signum(-2) as v // v = -1</li><li value="3">signum(1 + 2 - 3) as v // v = 0</li></ul></li>
        </ul>
        <h3 class="tight">toDegrees</h3>
        <p>Converts angles from radians to degrees.</p>
        <ul>
            <li value="1">Syntax: toDegrees(x)</li>
            <li value="2">Example: toDegrees(asin(1)) as v // v = 90</li>
        </ul>
        <h3 class="tight">toRadians</h3>
        <p>Converts angles from degrees to radians.</p>
        <ul>
            <li value="1">Syntax: toRadians(y)</li>
            <li value="2">Example: toRadians(180) as v // v = pi</li>
        </ul>
        <p>&#160;</p>
        <p>&#160;</p>
        <p class="MCWebHelpFramesetLink MCWebHelpFramesetLinkBottom" style="display: none;"><a href="Default.htm#Math_Expressions.htm">Open topic with navigation</a>
        </p>
    </body>
</html>