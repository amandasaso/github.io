<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" class="no-feedback" data-mc-search-type="Stem" data-mc-help-system-file-name="Default.xml" data-mc-path-to-help-system="" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Search|Parsing">
    <head>
        <meta charset="utf-8" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Parse Regex or Extract Operator</title>
        <link href="Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="Resources/Stylesheets/Styles.css" rel="stylesheet" />
        <script src="Resources/Scripts/jquery.min.js">
        </script>
        <script src="Resources/Scripts/plugins.min.js">
        </script>
        <script src="Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink MCWebHelpFramesetLinkTop" style="display: none;"><a href="Default.htm#Parse_Regex.htm">Open topic with navigation</a>
        </p>
        <script type="text/javascript">/* <![CDATA[ */
			var _gaq = _gaq || [];
			_gaq.push(['_setAccount', 'UA-16579649-1']);
			_gaq.push(['_trackPageview']);
			(function() {
			var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
			ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
			var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
			})();
		/* ]]> */</script>
        <h1>Parse Regex or Extract Operator</h1>
        <p>Parse regex (or "extract") enables users comfortable with regular expression syntax to extract more complex data from log lines. Parse regex can be used, for example, to extract nested fields.
</p>
        <p class="Note">User added fields, such as extracted or parsed fields, can be named using alphanumeric characters as well as underscores ("_") and dashes ("-Â­") and must start and end with an alphanumeric character.        </p>
        <p><b>Syntax</b> <![CDATA[
        ]]></p>
        <ul>
            <li value="1">... | parse regex "start_anchor_regex(?&lt;field_name&gt;.*?)stop_anchor_regex" | ...
</li>
            <li value="2">... | parse regex "start_anchor_regex(?&lt;field_name&gt;.*?)stop_anchor_regex" nodrop | ...
</li>
            <li value="3">Alternate term is "extract"         </li>
            <li value="4">See <a title="Wikipedia Regular Expressions" href="http://en.wikipedia.org/wiki/Regular_expression" target="_blank">regular expressions</a><br></br></li>
        </ul>
        <p style="font-weight: bold;">Rules        </p>
        <ul>
            <li value="1">Regex must be a valid Java regular expression enclosed within quotes.
            </li>
            <li value="2">Matching is case sensitive. If any of the text segments cannot be matched, then none of the variables will be assigned.
            </li>
            <li value="3">Multiple parse expressions are processed in the order they are specified. Each expression always starts matching from the beginning of the message string.
</li>
            <li value="4">Multiple parse expressions can be written with shorthand using comma-separated terms.</li>
            <li value="5">Add the option <b>nodrop</b>, then messages that match zero terms in the expression are included in the output. to include </li>
            <li value="6">Can be used with "parse anchor" operator.            </li>
        </ul>
        <p><b>Examples</b>
            <br />
        </p>
        <p style="font-weight: bold;">Parsing an IP&#160;address</p>
        <p>Extracting IP addresses from logs is straight-forward using a parse regex similar to:</p>
        <p class="Indent"><b>... | parse regex "(?&lt;ip_address&gt;\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}) " | ...</b>
        </p>
        <p style="font-weight: bold;">Parsing multiple fields in a single query</p>
        <p>Parse regex supports parsing out multiple fields in one query. For example, say we want to parse username and host information from logs. We'd use a query similar to:</p>
        <p class="Indent"><b>...| parse regex "user=(?&lt;user&gt;.*?):" | parse regex "host=(?&lt;msg_host&gt;.*?):" | ...</b>
        </p>
        <p><b>Sub-parsing a previously parsed field</b>
        </p>
        <p>In our example, we previously parsed a field named user_agent that contains information about browses attempting to access a website. Now we want to create a new field named mobile_device (derived from user_agent) that contains an iPhone string. We'd use a query similar to:</p>
        <p class="Indent"><b>_sourceCategory=*apache* | parse using public/apache/access | parse regex field=user_agent ".+?(?&lt;mobile_device&gt;iPhone);"</b>
        </p>
        <p style="font-weight: bold;">Indicating an OR&#160;condition</p>
        <p>In situations where we want to use an OR&#160;condition, where we have multiple possibilities that may match the regular expression, the best practice is to use the <b>?&#160;operator</b>. For example, say we're looking for either string1, string2, or string3. We'd use a query similar to:</p>
        <p class="Indent"><b>parse regex .... (?:string1|string2|string3| ...)</b>
        </p>
        <p>For a more concrete example, if we have a field named URL and we want to create a new field that includes domains that end with .com, .co.uk, or .com.au, we'd search with a query similar to:</p>
        <p class="Indent"><b>| parse regex field=url "[0-9A-Za-z-]+\.(?&lt;domain&gt;[A-Za-z-]+\.(?:co\.uk|com|com\.au))/.*"</b>
        </p>
        <p>&#160;</p>
        <p>&#160;</p>
        <p>&#160;</p>
        <p>&#160;</p>
        <p>&#160;</p>
        <p>&#160;</p>
        <p>&#160;</p>
        <p class="MCWebHelpFramesetLink MCWebHelpFramesetLinkBottom" style="display: none;"><a href="Default.htm#Parse_Regex.htm">Open topic with navigation</a>
        </p>
    </body>
</html>