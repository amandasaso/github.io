<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" class="no-feedback" data-mc-search-type="Stem" data-mc-help-system-file-name="Default.xml" data-mc-path-to-help-system="" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Beta Features">
    <head>
        <meta charset="utf-8" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Lookup Operator</title>
        <link href="Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="Resources/Stylesheets/Styles.css" rel="stylesheet" />
        <script src="Resources/Scripts/jquery.min.js">
        </script>
        <script src="Resources/Scripts/plugins.min.js">
        </script>
        <script src="Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink MCWebHelpFramesetLinkTop" style="display: none;"><a href="Default.htm#Lookup_Operator.htm">Open topic with navigation</a>
        </p>
        <script type="text/javascript">/* <![CDATA[ */
			var _gaq = _gaq || [];
			_gaq.push(['_setAccount', 'UA-16579649-1']);
			_gaq.push(['_trackPageview']);
			(function() {
			var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
			ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
			var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
			})();
		/* ]]> */</script>
        <h1>Lookup Operator</h1>
        <p>Using a lookup operator, you can map data in your log messages to meaningful information. For example, you could use a lookup operator to map  "userID" to a real user's name. Or, you could use a lookup operator to find black-listed IP addresses. In either case, you'll point the operator to one of the following:</p>
        <ul>
            <li value="1">A table of saved data generated by the <a href="Save_Operator.htm">Save operator</a>.</li>
            <li value="2">A CSV file that describes the relationship between the log file message and an external source.</li>
        </ul>
        <p><b>Syntax</b>
        </p>
        <p>A lookup operator follows this form:</p>
        <p style="font-weight: bold;">lookup [outputColumns] from [filePath] on [joinColumns]</p>
        <p>where:</p>
        <ul>
            <li value="1">outputColumns is a list of field names in the header of the filePath.</li>
            <li value="2">filePath is an https address of a CSV file containing the external relationship table or a table saved to the Sumo Logic file system by the Save operator.</li>
        </ul>
        <p class="Indent"><b>Note:</b> HTTP basic authentication is supported for .csv files, with the following syntax: https://USERNAME:PASSWORD@company.com/userTable.csv</p>
        <ul>
            <li value="1">joinColumns is a list that defines the relationship between values in the log data with matching values in an external table.</li>
        </ul>
        <h2>Using Lookup to access data saved by a Save operator</h2>
        <p>Once you've saved the results of a search to the Sumo Logic file system using a <a href="Save_Operator.htm">Save operator</a>, the lookup operator allows you to search that data.</p>
        <p>For example, say we wanted to find the date when users signed up in a file named newDailyUsers (the full path is myFolder/mySubFolder/newDailyUsers). We'd use this query to find that information:</p>
        <p><b>* | parse "user_name=*," as name</b>
            <br style="font-weight: bold;" /><b>| lookup date from myFolder/mySubFolder/newDailyUsers on name=name</b>
        </p>
        <h2>Structuring your CSV</h2>
        <p>The lookup operator currently supports CSV files with the following restrictions:</p>
        <ul>
            <li value="1">The CSV file must contain a header line.</li>
            <li value="2">All values in the CSV file need to be wrapped in quotes.</li>
            <li value="3">No spaces are allowed between quotes and values. For example:</li>
        </ul>
        <p class="Indent" style="font-weight: normal;"><code>"id","name","time"</code> <![CDATA[ ]]></p>
        <p class="Indent" style="font-weight: normal;"><code>"1","foo","6-15-12"</code> <![CDATA[ ]]></p>
        <p class="Indent" style="font-weight: normal;"><code>"2","zoo","6-14-12"</code> <![CDATA[ ]]></p>
        <p class="Indent" style="font-weight: normal;"><code>"3","woo","6-13-12"</code> <![CDATA[ ]]></p>
        <h2>Examples</h2>
        <p>You'll type your lookup operator in the Search tab of the Sumo Logic Web Application, just as you would any other operator.</p>
        <p>To match the userID string with a users' ID in your CSV, your query could be:</p>
        <p><b>* |&#160;parse "name=*, phone number=*," as (name, phone) | lookup email from https://compay.com/userTable.csv on name=userName, phone=cell</b>
        </p>
        <p>where the <code>userTable.csv</code> file includes the following:</p>
        <p class="Indent"><code>"id","userName","email","IP","cell"</code>
        </p>
        <p class="Indent"><code>"1","Joe","joe@example.com","192.168.1.1","650-123-4567"</code>
        </p>
        <p class="Indent"><code>"2","John","john@example.com","192.168.1.2","212-123-4567"</code>
        </p>
        <p class="Indent"><code>"3","Susan","susan@example.com","192.168.1.3","914-123-4567"</code>
        </p>
        <p class="Indent"><code>"4","John","another_john@example.com",192.168.1.4","408-123-4567"</code>
        </p>
        <p class="Indent"><code>"5","John","yet_another_john@example.com","192.169.1.5","734-123-4567"</code>
        </p>
        <p>Running this query adds three fields to the output: <b>userName</b>, <b>email</b>, and <b>IPAddress</b>.</p>
        <h2>Composite field lookup</h2>
        <p>In our example above we had several users named John. A lookup operator can be used on a composite set of fields, so you can identify the correct email for each person named John because each unique cell phone number has also been mapped using a query like:</p>
        <p><b>* |&#160;parse "name=*, phone number=*," as (name, phone) <br />| lookup email from https://compay.com/userTable.csv on name=userName, phone=cell</b>
        </p>
        <p>Running this query adds an <b>email</b> field to the output.</p>
        <h2>Using multiple lookup operators together</h2>
        <p>Another way to use a lookup operator is to chain lookup operators together. Each operator can call separate .csv files. For example, if you wanted to find user names and the position each user has in a company, your query could be:</p>
        <p><b>* | parse "userID=*," as userID | lookup userName from  https://company.com/userTable.csv on userID=id </b>
            <br style="font-weight: bold;" /><b>| lookup position from https://company.com/userPosition.csv on userID=id</b>
        </p>
        <p>where the userPosition.csv file includes the following:</p>
        <p class="Indent"><code>"id","position"</code>
        </p>
        <p class="Indent"><code>"1","Salesperso"</code>
        </p>
        <p class="Indent"><code>"2","Salesperson"</code>
        </p>
        <p class="Indent"><code>"3","Engineer"</code>
        </p>
        <p class="Indent"><code>"4","Manager</code>"</p>
        <p class="Indent"><code>"5","Senior Engineer"</code>
        </p>
        <p>In our example above, the first operator finds the name, and the second finds the position.</p>
        <p>&#160;</p>
        <p>&#160;</p>
        <p class="MCWebHelpFramesetLink MCWebHelpFramesetLinkBottom" style="display: none;"><a href="Default.htm#Lookup_Operator.htm">Open topic with navigation</a>
        </p>
    </body>
</html>